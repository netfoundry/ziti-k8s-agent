name: Promote Stable Release

on:
  release:
    types: [released]  # this release event activity type excludes prereleases

permissions:
  contents: write  # allow updating the major version and "latest" Git tags

env:
  REGISTRY: docker.io
  # repo only - no registry, no tag
  IMAGE_REPO: ${{ vars.ZITI_AGENT_IMAGE_REPO || 'netfoundry/ziti-k8s-agent' }}

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Parse Release Version
        id: parse
        shell: bash
        run: |
          if [[ "${GITHUB_REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "GITHUB_REF_NAME=${GITHUB_REF_NAME} is a stable release semver ref"
            echo "version=${GITHUB_REF_NAME#v}" | tee -a $GITHUB_OUTPUT
          else
            echo "GITHUB_REF_NAME=${GITHUB_REF_NAME} is not a stable release semver ref" >&2
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY}}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY}}
          username: ${{ vars.DOCKER_HUB_API_USER || secrets.DOCKER_HUB_API_USER }}
          password: ${{ secrets.DOCKER_HUB_API_TOKEN }}

      - uses: Actions-R-Us/actions-tagger@v2
        with:
          publish_latest_tag: false
          prefer_branch_releases: false 

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Define Docker Tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY}}/${{ env.IMAGE_REPO }}
          tags: |

            # set "latest" tag on releases
            type=raw,value=latest,enable=${{startsWith(github.ref_name, 'v')}}

            # set (e.g., "v1") major version tag on releases
            type=match,pattern=(v\d+)\..*,group=1,enable=${{startsWith(github.ref_name, 'v')}}

      - name: Promote Container Image Tags
        shell: bash
        run: |
          set -o xtrace
          # Convert comma-separated tags to array
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          
          # Get the release version without 'v' prefix
          VERSION="${{ steps.parse.outputs.version }}"
          
          # apply each tag to the release semver
          for TAG in "${TAGS[@]}"; do
            echo "Creating tag for $TAG -> $VERSION"
            docker buildx imagetools create \
              --tag ${TAG} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}:${VERSION}
          done
